<!DOCTYPE html>
<html>

<head>
  <!-- Standard Meta -->
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

  <!-- Site Properties -->
  <title>Fixed Menu Example - Semantic</title>

  <link rel="stylesheet" type="text/css" href="/semantic/dist/semantic.min.css">
  <link rel="stylesheet" type="text/css" href="/vis/dist/vis-timeline-graph2d.min.css">

  <script src="/vis/dist/vis.min.js"></script>
  <script src="/jquery/dist/jquery-3.2.1.min.js"></script>
  <script src="/semantic/dist/semantic.min.js"></script>
  <script src="/moment/dist/moment.min.js"></script>
  <script src="//kristw.github.io/d3kit-timeline/bower_components/d3/d3.min.js"></script>
  <script src="//kristw.github.io/d3kit-timeline/bower_components/d3kit/dist/d3kit.min.js"></script>
  <script src="//kristw.github.io/d3kit-timeline/bower_components/labella/dist/labella.min.js"></script>
  <script src="//kristw.github.io/d3kit-timeline/dist/d3kit-timeline.min.js"></script>
  <style type="text/css">
    body {
      background-color: #FFFFFF;
    }
    
    .ui.menu .item img.logo {
      margin-right: 1.5em;
    }
    
    .main.container {
      margin-top: 7em;
    }
    
    .wireframe {
      margin-top: 2em;
    }
    
    .ui.footer.segment {
      margin: 5em 0em 0em;
      padding: 5em 0em;
    }
  </style>

</head>

<body>

  <div class="ui fixed inverted menu">
    <div class="ui container">
      <a href="#" class="header item">
        <i class="hand spock icon"></i> Spoiler
      </a>
      <a href="#" class="item">Home</a>
      <div class="right menu">
        <a class="item">
          <%= user.name %>
        </a>

        <% if (user.id !== -1) { %>
        <a class="item" href="/logout">log out</a>
        <% } else {%>
        <a class="item" href="/welcome">log in</a>
        <% } %>
      </div>
    </div>
  </div>

  <div class="ui grid" style="margin: 0px 5px 0px 5px;">
    <div class="ten wide column">
      <div class="ui container center aligned">
        <!--<iframe width="650" height="382" src="https://www.youtube.com/embed/EjKSTTl_n8k" frameborder="0" allowfullscreen></iframe>-->
        <div id="player"></div>
      </div>
    </div>
    <div class="six wide column">
      <div class="ui container">

        <div class="ui form">
          <div class="field">
            <h3>Note Title</h3>
            <textarea id="noteTitle" rows="1"></textarea>
          </div>
          <div class="field">
            <h3>Note Text</h3>
            <textarea id="noteText"></textarea>
          </div>
          <div id="addNoteButton" class="ui teal labeled icon button">
            Add Note
            <i class="edit icon"></i>
          </div>
          <div class="ui label">
            You will add a note at <b id="playerSecond">00:00</b>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="ui center aligned basic segment">
    <div class="ui horizontal divider">
      Timeline
    </div>
  </div>
  <div class="ui center aligned container">
    <div class="timeline" id="timeline6">
    </div>
  </div>
  <div class="ui inverted vertical footer segment">
    <div class="ui center aligned container">
      <i class="hand spock icon"></i>
      <div class="ui horizontal inverted small divided link list">
        <a class="item" href="#">Contact Us</a>
        <a class="item" href="#">Terms and Conditions</a>
        <a class="item" href="#">Privacy Policy</a>
      </div>
    </div>
  </div>
</body>
<script type="text/javascript">
  video = <%- JSON.stringify(video) %>;
  user = <%- JSON.stringify(user) %>;
  timelineData = [];
  chart6 = null;
  player;

  function parseQuery(url) {
    var qstr = (new URL(url)).search;
    var query = {};
    var a = (qstr[0] === '?' ? qstr.substr(1) : qstr).split('&');
    for (var i = 0; i < a.length; i++) {
      var b = a[i].split('=');
      query[decodeURIComponent(b[0])] = decodeURIComponent(b[1] || '');
    }
    return query;
  }

  function formatSecond(d) {
    var minutes = Math.floor(d / 60);
    var seconds = d - minutes * 60;
    return ("0" + minutes).slice(-2) + ':' + ("0" + seconds).slice(-2);
  }

  const updateTimeline = () => {
    $.get(`/note?owner=${video.id}`, (data) => {
      timelineData = data.map((e) => {
        return {
          time: e.startSecond,
          title: e.title || e.text,
          text: e.text,
          raw: e
        };
      });
      chart6.data(timelineData).resizeToFit();
    });
  };

  const addNote = (note) => {
    $.post('/note', {
      owner: video.id,
      startSecond: parseInt(player.getCurrentTime()),
      text: $('#noteText').val(),
      title: $('#noteTitle').val(),
      user: (user.id !== -1) ? user.id : undefined,
    }, (data) => {
      updateTimeline();
      $('#noteText').val('');
      $('#noteTitle').val(''),
        player.playVideo();
      console.log(data);
    });
  };

  /* globals d3, d3Kit, d3KitTimeline */
  var data = [
    { time: new Date(1977, 4, 25), episode: 4, name: 'A New Hope' },
    { time: new Date(1980, 4, 17), episode: 5, name: 'The Empire Strikes Back' },
    { time: new Date(1984, 4, 25), episode: 6, name: 'Return of the Jedi' },
    { time: new Date(1999, 4, 19), episode: 1, name: 'The Phantom Menace' },
    { time: new Date(2002, 4, 16), episode: 2, name: 'Attack of the Clones' },
    { time: new Date(2005, 4, 19), episode: 3, name: 'Revenge of the Sith' },
    { time: new Date(2015, 11, 18), episode: 7, name: 'The Force Awakens' },
  ];

  var data2 = [
    { time: 1, name: 'MÜller', team: 'GER' },
    { time: 23, name: 'Klose', team: 'GER' },
    { time: 24, name: 'Kroos', team: 'GER' },
    { time: 26, name: 'Kroos', team: 'GER' },
    { time: 29, name: 'Khedira', team: 'GER' },
    { time: 69, name: 'SchÜrrle', team: 'GER' },
    { time: 79, name: 'SchÜrrle', team: 'GER' },
    { time: 90, name: 'Oscar', team: 'BRA' },
    { time: 90, name: 'Oscar2', team: 'BRA' },
  ];

  var colorScale = d3.scale.category10();

  function color6(d) {
    return colorScale(d.team);
  }

  const timelineInit = () => {
    chart6 = new d3KitTimeline('#timeline6', {
      direction: 'up',
      initialWidth: 1024,
      scale: d3.scale.linear(),
      domain: [0, parseInt(player.getDuration())],
      margin: { left: 20, right: 20, top: 20, bottom: 30 },
      textFn: function (d) { return d.title; },
      layerGap: 40,
      dotColor: color6,
      labelBgColor: color6,
      linkColor: color6,
      labella: {
        maxPos: 764,
        algorithm: 'simple'
      },
      textStyle: {
        'fill': function (d) { return d.team === 'BRA' ? '#000' : '#fff' },
        'text-decoration': function (d) { return d.team === 'BRA' ? 'none' : 'underline' },
        'font-weight': function (d) { return d.team === 'BRA' ? 700 : 400 },
        'comment-id': function (d) { return 1; }
      }
    });
    chart6.axis.tickFormat(function (d) {
      return formatSecond(d);
    });
    chart6.on('labelClick', (d, i) => {
      player.seekTo(d.time, true);
    });
    chart6.on('dotClick', (d, i) => {
      player.seekTo(d.time, true);
    });

    updateTimeline();
  }

  $(() => {
    $('#addNoteButton').click(addNote);
    $('#noteText').bind('input propertychange', function (e) {
      player.pauseVideo();
    });
    $('#noteTitle').bind('input propertychange', function (e) {
      player.pauseVideo();
    });
  });

  // 2. This code loads the IFrame Player API code asynchronously.
  let tag = document.createElement('script');
  const UNSTARTED = -1, ENDED = 0, PLAYING = 1, PAUSED = 2, BUFFERING = 3, VIDEO_CUED = 5;


  tag.src = "https://www.youtube.com/iframe_api";
  let firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // 3. This function creates an <iframe> (and YouTube player)
  //    after the API code downloads.

  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      height: '390',
      width: '640',
      videoId: parseQuery(video.link)['v'],
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // 4. The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    console.log('[onPlayerReady]', event);
    setInterval(() => {
      seconds = parseInt(player.getCurrentTime()) + 1;
      $('#playerSecond').text(formatSecond(seconds));
    }, 100);
    timelineInit();
    event.target.playVideo();
  }

  // 5. The API calls this function when the player's state changes.
  //    The function indicates that when playing a video (state=1),
  //    the player should play for six seconds and then stop.
  done = false;
  function onPlayerStateChange(event) {
    console.log('[onPlayerStateChange]', event);
    if (event.data == YT.PlayerState.PLAYING && !done) {
      done = true;
    }
  }
  function stopVideo() {
    player.stopVideo();
  }

</script>

</html>